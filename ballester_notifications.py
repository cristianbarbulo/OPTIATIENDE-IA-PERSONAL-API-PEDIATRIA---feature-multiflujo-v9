"""
ballester_notifications.py - Sistema de Notificaciones Centro Pedi√°trico Ballester
Sistema V11 - Gesti√≥n Completa de Notificaciones y Escalaci√≥n M√©dica

Este m√≥dulo maneja todas las notificaciones espec√≠ficas del Centro Pedi√°trico Ballester:
- Detecci√≥n de frustraci√≥n del cliente
- Sistema /clientedemorado con escalaci√≥n inteligente
- Notificaciones al staff m√©dico sobre turnos confirmados
- Alertas de lista de espera
- Manejo de horarios de atenci√≥n para derivaciones

CR√çTICO: Este sistema debe ser inteligente para detectar cu√°ndo escalar y cu√°ndo no,
evitando spam al personal m√©dico pero asegurando que ning√∫n paciente quede sin atenci√≥n.

Autor: Sistema OPTIATIENDE-IA V11
Cliente: Centro Pedi√°trico Ballester
Fecha: Enero 2025
"""

import logging
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple

import config
import memory
import msgio_handler

logger = logging.getLogger(config.TENANT_NAME)

class BallesterNotificationSystem:
    """
    Sistema de notificaciones espec√≠fico para Centro Pedi√°trico Ballester.
    
    Maneja la escalaci√≥n inteligente, detecci√≥n de frustraci√≥n, y notificaciones
    al staff m√©dico con contexto completo.
    """
    
    # Configuraci√≥n espec√≠fica de Ballester
    STAFF_CONTACT = "5493413167185"  # Contacto del staff m√©dico (desde config despu√©s)
    BUSINESS_HOURS = {
        'start': 9,
        'end': 19,
        'days': ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']
    }
    
    # Patrones de frustraci√≥n del cliente
    FRUSTRATION_PATTERNS = [
        'no entiendo',
        'no me sirve',
        'esto no funciona',
        'me canse',
        'basta',
        'ya probe',
        'no puedo',
        'dificil',
        'complicado',
        'me perd√≠',
        'confuso',
        'ayuda',
        'ayudame',
        'no se que hacer',
        'hable con una persona',
        'operador',
        'humano',
        'persona real',
        'telefono',
        'llamar',
        'comunicar'
    ]
    
    # Umbrales para detecci√≥n de frustraci√≥n
    FRUSTRATION_THRESHOLDS = {
        'message_count': 8,        # Si env√≠a m√°s de 8 mensajes sin progreso
        'same_message_count': 3,   # Si repite el mismo mensaje 3 veces
        'time_in_flow': 600,      # Si est√° m√°s de 10 minutos en el mismo flujo
        'pattern_matches': 2       # Si usa 2 o m√°s patrones de frustraci√≥n
    }
    
    def __init__(self):
        """Inicializa el sistema de notificaciones"""
        
        # Configurar contacto del staff desde configuraci√≥n
        self.staff_contact = getattr(config, 'NOTIFICATION_CONTACT', self.STAFF_CONTACT)
        logger.info(f"[BALLESTER_NOTIF] Sistema de notificaciones inicializado - Staff: {self.staff_contact}")
    
    def detect_client_frustration(self, mensaje_usuario: str, context: Dict, history: List[Dict]) -> Dict[str, Any]:
        """
        Detecta si el cliente est√° frustrado y necesita escalaci√≥n.
        
        Esta funci√≥n analiza m√∫ltiples se√±ales de frustraci√≥n y determina
        si se debe activar el sistema /clientedemorado.
        
        Args:
            mensaje_usuario: √öltimo mensaje del cliente
            context: Contexto actual de la conversaci√≥n
            history: Historial completo de la conversaci√≥n
            
        Returns:
            Dict con an√°lisis de frustraci√≥n y recomendaci√≥n de escalaci√≥n
        """
        logger.info("[BALLESTER_NOTIF] Analizando posible frustraci√≥n del cliente")
        
        frustration_score = 0
        detected_signals = []
        
        # ========== SE√ëAL 1: PATRONES DE FRUSTRACI√ìN EN EL MENSAJE ==========
        mensaje_lower = mensaje_usuario.lower().strip()
        pattern_count = 0
        
        for pattern in self.FRUSTRATION_PATTERNS:
            if pattern in mensaje_lower:
                pattern_count += 1
                detected_signals.append(f"Patr√≥n frustrante: '{pattern}'")
        
        if pattern_count >= self.FRUSTRATION_THRESHOLDS['pattern_matches']:
            frustration_score += 3
            detected_signals.append(f"M√∫ltiples patrones de frustraci√≥n ({pattern_count})")
        
        # ========== SE√ëAL 2: REPETICI√ìN DEL MISMO MENSAJE ==========
        recent_messages = [msg.get('content', '') for msg in history[-5:] if msg.get('role') == 'user']
        same_message_count = recent_messages.count(mensaje_usuario) if recent_messages else 0
        
        if same_message_count >= self.FRUSTRATION_THRESHOLDS['same_message_count']:
            frustration_score += 2
            detected_signals.append(f"Mensaje repetido {same_message_count} veces")
        
        # ========== SE√ëAL 3: DEMASIADOS MENSAJES SIN PROGRESO ==========
        user_messages = [msg for msg in history if msg.get('role') == 'user']
        message_count = len(user_messages)
        
        # Verificar progreso: si est√° en el mismo estado por mucho tiempo
        current_state = context.get('current_state', '')
        verification_state = context.get('verification_state', '')
        
        if message_count >= self.FRUSTRATION_THRESHOLDS['message_count'] and not context.get('progress_made'):
            frustration_score += 2
            detected_signals.append(f"Muchos mensajes sin progreso ({message_count})")
        
        # ========== SE√ëAL 4: TIEMPO EXCESIVO EN EL MISMO FLUJO ==========
        flow_start_time = context.get('flow_start_time')
        if flow_start_time:
            try:
                start_time = datetime.fromisoformat(flow_start_time)
                time_in_flow = (datetime.now() - start_time).total_seconds()
                
                if time_in_flow > self.FRUSTRATION_THRESHOLDS['time_in_flow']:
                    frustration_score += 2
                    detected_signals.append(f"Tiempo excesivo en flujo ({int(time_in_flow/60)} minutos)")
            except:
                pass
        
        # ========== SE√ëAL 5: ESTADOS PROBLEM√ÅTICOS ==========
        if current_state in ['LOCKED', 'ERROR', 'FAILED']:
            frustration_score += 3
            detected_signals.append(f"Estado problem√°tico: {current_state}")
        
        # ========== EVALUACI√ìN FINAL ==========
        should_escalate = frustration_score >= 5  # Umbral de escalaci√≥n
        escalation_urgency = 'high' if frustration_score >= 8 else 'medium'
        
        analysis = {
            'frustration_detected': should_escalate,
            'frustration_score': frustration_score,
            'escalation_urgency': escalation_urgency,
            'detected_signals': detected_signals,
            'recommendation': 'escalate_to_human' if should_escalate else 'continue_bot',
            'reason': f"Score {frustration_score}/10 - {len(detected_signals)} se√±ales detectadas"
        }
        
        logger.info(f"[BALLESTER_NOTIF] An√°lisis frustraci√≥n: {analysis}")
        
        return analysis
    
    def trigger_client_delayed_flow(self, context: Dict, author: str, frustration_analysis: Dict) -> Tuple[str, Dict, Optional[List[Dict]]]:
        """
        Activa el flujo /clientedemorado cuando se detecta frustraci√≥n cr√≠tica.
        
        Args:
            context: Contexto actual con todos los datos recopilados
            author: ID del cliente
            frustration_analysis: An√°lisis de frustraci√≥n detectada
            
        Returns:
            Tuple con mensaje, contexto actualizado, y botones de escalaci√≥n
        """
        logger.info("[BALLESTER_NOTIF] Activando flujo /clientedemorado")
        
        # Marcar que se activ√≥ el flujo de escalaci√≥n
        context['escalation_triggered'] = True
        context['escalation_timestamp'] = datetime.now().isoformat()
        context['escalation_reason'] = frustration_analysis.get('reason', 'Frustraci√≥n detectada')
        context['current_state'] = 'BALLESTER_CLIENT_ESCALATION'
        
        # Mensaje emp√°tico y profesional para el cliente
        mensaje_cliente = f"""üè• **Centro Pedi√°trico Ballester**

Entiendo que puedes estar teniendo algunas dificultades con nuestro sistema automatizado.

**¬øTe gustar√≠a que nuestro equipo m√©dico se comunique contigo directamente?**

Nuestros profesionales pueden ayudarte personalmente con:
‚Ä¢ Agendamiento de turnos
‚Ä¢ Consultas sobre coberturas
‚Ä¢ Informaci√≥n sobre estudios y preparaciones
‚Ä¢ Cualquier duda que tengas

üìû **Tambi√©n puedes llamar directamente:**
4616-6870 √≥ 11-5697-5007
üïê Lunes a Viernes de 9 a 19hs

¬øC√≥mo prefieres continuar?"""
        
        # Botones de escalaci√≥n
        botones = [
            {"id": "si_contacto_humano_ballester", "title": "‚úÖ S√≠, que me contacten"},
            {"id": "no_continuar_bot_ballester", "title": "ü§ñ Seguir con el bot"}
        ]
        
        return mensaje_cliente, context, botones
    
    def handle_escalation_confirmation(self, choice: str, context: Dict, author: str, history: List[Dict]) -> Tuple[str, Dict]:
        """
        Maneja la confirmaci√≥n de escalaci√≥n del cliente.
        
        Args:
            choice: Elecci√≥n del cliente (si_contacto o no_continuar)
            context: Contexto con todos los datos recopilados
            author: ID del cliente
            history: Historial completo para enviar al staff
            
        Returns:
            Tuple con mensaje de respuesta y contexto actualizado
        """
        logger.info(f"[BALLESTER_NOTIF] Procesando confirmaci√≥n de escalaci√≥n: {choice}")
        
        if choice == 'si_contacto_humano_ballester':
            # Cliente acepta escalaci√≥n, notificar al staff
            notification_sent = self._send_escalation_notification(context, author, history)
            
            if notification_sent:
                context['escalation_confirmed'] = True
                context['staff_notified'] = True
                context['current_state'] = 'BALLESTER_ESCALATION_COMPLETED'
                
                mensaje = """‚úÖ **¬°Listo! Escalaci√≥n Activada**

He notificado a nuestro equipo m√©dico sobre tu consulta.

**¬øQu√© sigue?**
‚Ä¢ Te contactar√°n en los pr√≥ximos **15 minutos**
‚Ä¢ Te llamar√°n al n√∫mero desde el que escribes
‚Ä¢ Si no contestan, volver√°n a intentar

üìû **Mientras tanto, tambi√©n puedes llamar:**
**4616-6870** √≥ **11-5697-5007**
üïê Lunes a Viernes de 9 a 19hs

üìç **Centro Pedi√°trico Ballester**
Alvear 2307, Villa Ballester

¬°Gracias por elegirnos! üè•"""
                
            else:
                mensaje = """‚ùå **Error en la Escalaci√≥n**

No pude enviar la notificaci√≥n al equipo en este momento.

Por favor, contacta directamente:
üìû **4616-6870** √≥ **11-5697-5007**
üïê Lunes a Viernes de 9 a 19hs

¬°Disculpa las molestias!"""
            
            return mensaje, context
            
        elif choice == 'no_continuar_bot_ballester':
            # Cliente prefiere continuar con el bot
            context['escalation_declined'] = True
            context['current_state'] = 'conversando'
            
            mensaje = """ü§ñ **¬°Perfecto! Continuemos**

Entiendo, sigamos juntos. Voy a ayudarte paso a paso.

**Para una experiencia m√°s fluida, puedes usar estos comandos:**
‚Ä¢ **"QUIERO AGENDAR"** - Para solicitar turnos
‚Ä¢ **"QUIERO CONSULTAR COBERTURA"** - Para verificar tu obra social
‚Ä¢ **"QUIERO CANCELAR"** - Para cancelar turnos

¬øQu√© necesitas hacer hoy? Te gu√≠o paso a paso. üòä"""
            
            return mensaje, context
        
        else:
            # Opci√≥n no reconocida
            return self.trigger_client_delayed_flow(context, author, {'reason': 'Opci√≥n de escalaci√≥n no reconocida'})
    
    def _send_escalation_notification(self, context: Dict, author: str, history: List[Dict]) -> bool:
        """
        Env√≠a notificaci√≥n detallada al staff m√©dico sobre escalaci√≥n de cliente.
        
        Args:
            context: Contexto completo con datos del paciente
            author: ID del cliente (tel√©fono WhatsApp)
            history: Historial completo de la conversaci√≥n
            
        Returns:
            True si se envi√≥ exitosamente, False si fall√≥
        """
        logger.info(f"[BALLESTER_NOTIF] Enviando notificaci√≥n de escalaci√≥n para {author}")
        
        try:
            # Extraer datos del paciente si est√°n disponibles
            patient_data = context.get('patient_data', {})
            service_name = context.get('service_name', 'No especificado')
            verification_state = context.get('verification_state', 'No iniciada')
            escalation_reason = context.get('escalation_reason', 'Cliente solicit√≥ ayuda')
            
            # Construir informaci√≥n del progreso
            progress_info = self._analyze_client_progress(context, history)
            
            # Construir mensaje detallado para el staff
            staff_message = f"""üö® **ESCALACI√ìN REQUERIDA - Cliente con Dificultades**

‚è∞ **Timestamp:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
üì± **WhatsApp Cliente:** {author}
ü§ñ **Sistema:** OptiAtiende-IA V11

üë§ **INFORMACI√ìN DEL PACIENTE:**
‚Ä¢ **Nombre:** {patient_data.get('nombre', 'No recopilado')}
‚Ä¢ **DNI:** {patient_data.get('dni', 'No recopilado')}
‚Ä¢ **Obra Social:** {patient_data.get('obra_social', 'No recopilada')}
‚Ä¢ **Plan:** {patient_data.get('plan', 'No recopilado')}
‚Ä¢ **Tel√©fono:** {patient_data.get('celular', author)}
‚Ä¢ **Email:** {patient_data.get('email', 'No recopilado')}

üéØ **SERVICIO SOLICITADO:**
‚Ä¢ **Especialidad/Estudio:** {service_name}
‚Ä¢ **Estado de Verificaci√≥n:** {verification_state}

üìä **AN√ÅLISIS DEL PROGRESO:**
‚Ä¢ **Progreso completado:** {progress_info['completion_percentage']}%
‚Ä¢ **Estado actual:** {context.get('current_state', 'Desconocido')}
‚Ä¢ **Tiempo en el sistema:** {progress_info['time_in_system']} minutos
‚Ä¢ **Mensajes enviados:** {progress_info['user_message_count']}

‚ö†Ô∏è **RAZ√ìN DE ESCALACI√ìN:**
{escalation_reason}

üó®Ô∏è **√öLTIMOS 3 MENSAJES DEL CLIENTE:**
{self._format_last_messages(history, 3)}

üîÑ **PR√ìXIMOS PASOS RECOMENDADOS:**
1. Contactar al cliente en los pr√≥ximos 15 minutos
2. Ayudar a completar el proceso de {service_name}
3. Registrar el turno manualmente si es necesario
4. Reportar cualquier mejora necesaria al sistema

üìû **Acci√≥n:** CONTACTAR AL CLIENTE AHORA"""
            
            # Enviar notificaci√≥n al staff
            if self.staff_contact and self._is_business_hours():
                result = msgio_handler.send_message(self.staff_contact, staff_message)
                
                if result:
                    logger.info(f"[BALLESTER_NOTIF] ‚úÖ Notificaci√≥n de escalaci√≥n enviada exitosamente")
                    
                    # Registrar escalaci√≥n en memoria para auditor√≠a
                    self._log_escalation_to_memory(author, context, escalation_reason)
                    
                    return True
                else:
                    logger.error("[BALLESTER_NOTIF] ‚ùå Error enviando notificaci√≥n de escalaci√≥n")
                    return False
            
            elif not self._is_business_hours():
                # Fuera de horario laboral, programar notificaci√≥n
                self._schedule_out_of_hours_notification(context, author, staff_message)
                return True
            
            else:
                logger.error("[BALLESTER_NOTIF] Staff contact no configurado")
                return False
                
        except Exception as e:
            logger.error(f"[BALLESTER_NOTIF] ‚ùå Error enviando notificaci√≥n de escalaci√≥n: {e}", exc_info=True)
            return False
    
    def send_appointment_confirmed_notification(self, appointment_data: Dict, patient_data: Dict) -> bool:
        """
        Env√≠a notificaci√≥n al staff sobre turno confirmado exitosamente.
        
        Args:
            appointment_data: Datos de la cita confirmada
            patient_data: Datos completos del paciente
            
        Returns:
            True si se envi√≥ exitosamente
        """
        logger.info("[BALLESTER_NOTIF] Enviando notificaci√≥n de turno confirmado")
        
        try:
            # Construir mensaje para el staff
            staff_message = f"""üè• **NUEVO TURNO CONFIRMADO**

‚è∞ **Confirmado:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
üÜî **ID Turno:** {appointment_data.get('appointment_id', 'No disponible')}

üë§ **DATOS DEL PACIENTE:**
‚Ä¢ **Nombre:** {patient_data.get('nombre')}
‚Ä¢ **DNI:** {patient_data.get('dni')}
‚Ä¢ **Fecha Nac.:** {patient_data.get('fecha_nacimiento')}
‚Ä¢ **Tel√©fono:** {patient_data.get('celular')}
‚Ä¢ **Email:** {patient_data.get('email')}

üè• **INFORMACI√ìN M√âDICA:**
‚Ä¢ **Obra Social:** {patient_data.get('obra_social')}
‚Ä¢ **Plan:** {patient_data.get('plan')}
‚Ä¢ **N¬∞ Afiliado:** {patient_data.get('numero_afiliado')}

ü©∫ **DETALLES DE LA CITA:**
‚Ä¢ **Servicio:** {appointment_data.get('service')}
‚Ä¢ **Fecha:** {appointment_data.get('date')}
‚Ä¢ **Hora:** {appointment_data.get('time')}
‚Ä¢ **Doctor:** {appointment_data.get('doctor')}

üí∞ **INFORMACI√ìN DE PAGO:**
{self._format_payment_info(appointment_data.get('payment_info', {}))}

ü§ñ **Confirmado v√≠a:** OptiAtiende-IA Bot V11
üì± **WhatsApp:** {appointment_data.get('patient_whatsapp', 'No disponible')}"""
            
            # Enviar notificaci√≥n
            if self.staff_contact:
                result = msgio_handler.send_message(self.staff_contact, staff_message)
                
                if result:
                    logger.info("[BALLESTER_NOTIF] ‚úÖ Notificaci√≥n de turno confirmado enviada")
                    return True
                else:
                    logger.error("[BALLESTER_NOTIF] ‚ùå Error enviando notificaci√≥n de turno")
                    return False
            else:
                logger.warning("[BALLESTER_NOTIF] Staff contact no configurado para notificaciones")
                return False
                
        except Exception as e:
            logger.error(f"[BALLESTER_NOTIF] ‚ùå Error enviando notificaci√≥n de turno: {e}", exc_info=True)
            return False
    
    def send_waitlist_notification(self, waitlist_data: Dict, patient_data: Dict) -> bool:
        """
        Env√≠a notificaci√≥n al staff sobre paciente agregado a lista de espera.
        
        Args:
            waitlist_data: Datos de la lista de espera
            patient_data: Datos del paciente
            
        Returns:
            True si se envi√≥ exitosamente
        """
        logger.info("[BALLESTER_NOTIF] Enviando notificaci√≥n de lista de espera")
        
        try:
            staff_message = f"""‚è≥ **NUEVO PACIENTE EN LISTA DE ESPERA**

‚è∞ **Agregado:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
üÜî **ID Lista:** {waitlist_data.get('waitlist_id', 'No disponible')}

üë§ **PACIENTE:**
‚Ä¢ **Nombre:** {patient_data.get('nombre')}
‚Ä¢ **DNI:** {patient_data.get('dni')}
‚Ä¢ **Tel√©fono:** {patient_data.get('celular')}
‚Ä¢ **Obra Social:** {patient_data.get('obra_social')}

ü©∫ **SERVICIO:** {waitlist_data.get('service')}
üìû **WhatsApp:** {waitlist_data.get('patient_whatsapp')}

ü§ñ **Agregado v√≠a:** OptiAtiende-IA Bot V11

**Recordatorio:** Contactar cuando haya disponibilidad"""
            
            # Enviar notificaci√≥n
            if self.staff_contact:
                result = msgio_handler.send_message(self.staff_contact, staff_message)
                
                if result:
                    logger.info("[BALLESTER_NOTIF] ‚úÖ Notificaci√≥n de lista de espera enviada")
                    return True
                else:
                    logger.error("[BALLESTER_NOTIF] ‚ùå Error enviando notificaci√≥n de lista de espera")
                    return False
            else:
                logger.warning("[BALLESTER_NOTIF] Staff contact no configurado")
                return False
                
        except Exception as e:
            logger.error(f"[BALLESTER_NOTIF] ‚ùå Error enviando notificaci√≥n de lista de espera: {e}", exc_info=True)
            return False
    
    def get_out_of_hours_message(self) -> str:
        """Retorna mensaje para cuando el sistema est√° fuera del horario de atenci√≥n"""
        
        return """üïê **Fuera del Horario de Atenci√≥n**

En este momento, nuestro personal no est√° disponible para derivaciones humanas.

üìû **Horario de Atenci√≥n:**
**Lunes a Viernes de 9 a 19hs**

ü§ñ **Opciones disponibles ahora:**
‚Ä¢ Continuar con el bot automatizado
‚Ä¢ Dejar tu consulta detallada para ma√±ana
‚Ä¢ Para urgencias: **4616-6870** √≥ **11-5697-5007**

Por favor, d√©janos tu consulta detallada y te responderemos ma√±ana o el lunes a partir de las 9hs."""
    
    # =================== M√âTODOS AUXILIARES ===================
    
    def _analyze_client_progress(self, context: Dict, history: List[Dict]) -> Dict[str, Any]:
        """Analiza el progreso del cliente en el sistema"""
        
        # Contar mensajes del usuario
        user_messages = [msg for msg in history if msg.get('role') == 'user']
        user_message_count = len(user_messages)
        
        # Calcular tiempo en el sistema
        first_message_time = None
        if history:
            try:
                first_message_time = datetime.fromisoformat(history[0].get('timestamp', ''))
                time_in_system = (datetime.now() - first_message_time).total_seconds() / 60
            except:
                time_in_system = 0
        else:
            time_in_system = 0
        
        # Calcular porcentaje de completitud
        completion_percentage = 0
        
        verification_state = context.get('verification_state', '')
        if verification_state == 'IDENTIFICAR_PRACTICA':
            completion_percentage = 25
        elif verification_state == 'IDENTIFICAR_PACIENTE':
            completion_percentage = 50
        elif verification_state == 'VERIFICAR_DATOS':
            completion_percentage = 75
        elif verification_state == 'OBTENER_VEREDICTO':
            completion_percentage = 90
        elif context.get('verification_completed'):
            completion_percentage = 100
        
        return {
            'user_message_count': user_message_count,
            'time_in_system': round(time_in_system, 1),
            'completion_percentage': completion_percentage,
            'has_patient_data': bool(context.get('patient_data')),
            'has_service_selected': bool(context.get('service_name')),
            'verification_completed': context.get('verification_completed', False)
        }
    
    def _format_last_messages(self, history: List[Dict], count: int = 3) -> str:
        """Formatea los √∫ltimos N mensajes para incluir en notificaciones"""
        
        if not history:
            return "Sin historial disponible"
        
        # Obtener √∫ltimos mensajes del usuario y del bot
        recent_messages = history[-count*2:]  # Tomar m√°s para asegurar que hay suficientes
        formatted_messages = []
        
        for msg in recent_messages:
            role = msg.get('role', 'unknown')
            content = msg.get('content', '')
            timestamp = msg.get('timestamp', '')
            
            try:
                # Formatear timestamp
                if timestamp:
                    dt = datetime.fromisoformat(timestamp)
                    time_str = dt.strftime('%H:%M')
                else:
                    time_str = 'N/A'
            except:
                time_str = 'N/A'
            
            if role == 'user':
                formatted_messages.append(f"[{time_str}] Cliente: {content}")
            else:
                formatted_messages.append(f"[{time_str}] Bot: {content}")
        
        return '\n'.join(formatted_messages[-count*2:])  # √öltimos N intercambios
    
    def _format_payment_info(self, payment_info: Dict) -> str:
        """Formatea informaci√≥n de pagos para notificaciones"""
        
        if not payment_info:
            return "Sin informaci√≥n de pagos"
        
        info_lines = []
        
        if payment_info.get('copago'):
            info_lines.append(f"‚Ä¢ Copago: ${payment_info['copago']}")
        
        if payment_info.get('bono_contribucion'):
            info_lines.append(f"‚Ä¢ Bono Contribuci√≥n: ${payment_info['bono_contribucion']}")
        
        if payment_info.get('particular_fee'):
            info_lines.append(f"‚Ä¢ Arancel Particular: ${payment_info['particular_fee']}")
        
        if payment_info.get('arancel_especial'):
            info_lines.append(f"‚Ä¢ Arancel Especial: ${payment_info['arancel_especial']}")
        
        return '\n'.join(info_lines) if info_lines else "Cobertura total por obra social"
    
    def _is_business_hours(self) -> bool:
        """Verifica si estamos en horario laboral"""
        
        now = datetime.now()
        current_hour = now.hour
        current_day = now.strftime('%A').lower()
        
        # Verificar d√≠a de la semana
        if current_day not in self.BUSINESS_HOURS['days']:
            return False
        
        # Verificar hora (9 a 19hs)
        if self.BUSINESS_HOURS['start'] <= current_hour < self.BUSINESS_HOURS['end']:
            return True
        
        return False
    
    def _schedule_out_of_hours_notification(self, context: Dict, author: str, message: str):
        """Programa notificaci√≥n para el pr√≥ximo horario laboral"""
        
        logger.info("[BALLESTER_NOTIF] Programando notificaci√≥n para horario laboral")
        
        # En producci√≥n, esto se implementar√≠a con un sistema de colas o scheduler
        # Por ahora, simplemente logueamos la intenci√≥n
        logger.warning(f"[BALLESTER_NOTIF] Notificaci√≥n fuera de horario programada para {author}")
        
        # Guardar en memoria para procesamiento posterior
        try:
            out_of_hours_data = {
                'author': author,
                'context': context,
                'message': message,
                'scheduled_for': self._get_next_business_hour(),
                'created_at': datetime.now().isoformat()
            }
            
            # Guardar en Firebase para procesamiento posterior
            memory.save_out_of_hours_notification(author, out_of_hours_data)
            
        except Exception as e:
            logger.error(f"[BALLESTER_NOTIF] Error programando notificaci√≥n: {e}")
    
    def _get_next_business_hour(self) -> str:
        """Calcula la pr√≥xima hora laboral"""
        
        now = datetime.now()
        
        # Si es fin de semana, ir al pr√≥ximo lunes a las 9
        if now.weekday() >= 5:  # S√°bado o domingo
            days_until_monday = 7 - now.weekday()
            next_business_day = now + timedelta(days=days_until_monday)
            next_business_time = next_business_day.replace(hour=9, minute=0, second=0, microsecond=0)
        
        # Si es d√≠a laboral pero fuera de horario
        elif now.hour < 9:
            # Mismo d√≠a a las 9
            next_business_time = now.replace(hour=9, minute=0, second=0, microsecond=0)
        
        elif now.hour >= 19:
            # Pr√≥ximo d√≠a laboral a las 9
            tomorrow = now + timedelta(days=1)
            if tomorrow.weekday() >= 5:  # Si ma√±ana es fin de semana
                days_until_monday = 7 - tomorrow.weekday()
                next_business_time = tomorrow + timedelta(days=days_until_monday)
                next_business_time = next_business_time.replace(hour=9, minute=0, second=0, microsecond=0)
            else:
                next_business_time = tomorrow.replace(hour=9, minute=0, second=0, microsecond=0)
        
        else:
            # Dentro del horario laboral (esto no deber√≠a pasar si se llama correctamente)
            next_business_time = now
        
        return next_business_time.isoformat()
    
    def _log_escalation_to_memory(self, author: str, context: Dict, reason: str):
        """Guarda registro de escalaci√≥n en memoria para auditor√≠a"""
        
        try:
            escalation_log = {
                'author': author,
                'timestamp': datetime.now().isoformat(),
                'reason': reason,
                'context_snapshot': context.copy(),
                'escalation_type': 'client_frustration',
                'system_version': 'V11'
            }
            
            # Guardar en Firebase
            memory.save_escalation_log(author, escalation_log)
            
            logger.info(f"[BALLESTER_NOTIF] Escalaci√≥n registrada en memoria para auditor√≠a")
            
        except Exception as e:
            logger.error(f"[BALLESTER_NOTIF] Error guardando escalaci√≥n en memoria: {e}")


# =================== FUNCIONES HELPER PARA MAIN.PY ===================

def detect_ballester_frustration(mensaje_usuario: str, context: Dict, history: List[Dict]) -> Dict[str, Any]:
    """Funci√≥n helper para detectar frustraci√≥n desde main.py o meta-agente"""
    notif_system = BallesterNotificationSystem()
    return notif_system.detect_client_frustration(mensaje_usuario, context, history)

def trigger_ballester_escalation(context: Dict, author: str, frustration_analysis: Dict) -> Tuple[str, Dict, Optional[List[Dict]]]:
    """Funci√≥n helper para activar escalaci√≥n desde main.py"""
    notif_system = BallesterNotificationSystem()
    return notif_system.trigger_client_delayed_flow(context, author, frustration_analysis)

def handle_ballester_escalation_choice(choice: str, context: Dict, author: str, history: List[Dict]) -> Tuple[str, Dict]:
    """Funci√≥n helper para manejar elecci√≥n de escalaci√≥n"""
    notif_system = BallesterNotificationSystem()
    return notif_system.handle_escalation_confirmation(choice, context, author, history)

def notify_ballester_appointment_confirmed(appointment_data: Dict, patient_data: Dict) -> bool:
    """Funci√≥n helper para notificar turno confirmado"""
    notif_system = BallesterNotificationSystem()
    return notif_system.send_appointment_confirmed_notification(appointment_data, patient_data)

def notify_ballester_waitlist_added(waitlist_data: Dict, patient_data: Dict) -> bool:
    """Funci√≥n helper para notificar agregado a lista de espera"""
    notif_system = BallesterNotificationSystem()
    return notif_system.send_waitlist_notification(waitlist_data, patient_data)

def get_ballester_out_of_hours_message() -> str:
    """Funci√≥n helper para mensaje fuera de horario"""
    notif_system = BallesterNotificationSystem()
    return notif_system.get_out_of_hours_message()
