"""
BALLESTER_INTEGRATION_GUIDE.py - Gu√≠a Completa de Integraci√≥n Sistema V11
Centro Pedi√°trico Ballester - Instrucciones Exactas de Implementaci√≥n

Esta gu√≠a contiene las instrucciones EXACTAS para integrar el sistema V11 de Ballester
con el main.py existente SIN SOBREESCRIBIR ning√∫n archivo del sistema actual.

CR√çTICO: Seguir estas instrucciones paso a paso para una integraci√≥n perfecta.

Autor: Sistema OPTIATIENDE-IA V11
Cliente: Centro Pedi√°trico Ballester
Fecha: Enero 2025
"""

# =================== IMPORTACIONES A AGREGAR EN MAIN.PY ===================

IMPORT_BALLESTER_CODE = '''
# === IMPORTACIONES ESPEC√çFICAS BALLESTER V11 ===
try:
    import verification_handler
    import rules_engine
    import ballester_notifications
    import ballester_agendamiento_adapter
    import ballester_main_extensions
    import ballester_firebase_config
    import clinica_api
    
    # Variable global para indicar que Ballester V11 est√° habilitado
    BALLESTER_V11_ENABLED = True
    logger.info("[BALLESTER] ‚úÖ Sistema V11 cargado exitosamente")
    
except ImportError as e:
    BALLESTER_V11_ENABLED = False
    logger.warning(f"[BALLESTER] ‚ö†Ô∏è Sistema V11 no disponible: {e}")
    logger.warning("[BALLESTER] Continuando con sistema est√°ndar...")
'''

# =================== MAPA DE ACCIONES A AGREGAR ===================

BALLESTER_ACTION_MAPPINGS = '''
# === ACCIONES ESPEC√çFICAS BALLESTER V11 ===
# Agregar estas l√≠neas al MAPA_DE_ACCIONES existente

if BALLESTER_V11_ENABLED:
    MAPA_DE_ACCIONES.update({
        'iniciar_verificacion_medica': ballester_main_extensions.start_ballester_medical_verification,
        'consultar_cobertura': ballester_main_extensions.start_ballester_coverage_check,
        'cancelar_cita_ballester': agendamiento_handler.iniciar_cancelacion_cita,  # Reutilizar funci√≥n existente
        'reprogramar_cita_ballester': agendamiento_handler.iniciar_reprogramacion_cita,  # Reutilizar funci√≥n existente
    })
    logger.info("[BALLESTER] Acciones m√©dicas V11 agregadas al mapa")
'''

# =================== MODIFICACI√ìN DE PROCESS_MESSAGE_LOGIC ===================

BALLESTER_MESSAGE_LOGIC_ENHANCEMENT = '''
def process_message_logic_enhanced_ballester(messages, author):
    """
    VERSI√ìN MEJORADA DE process_message_logic para incluir flujo m√©dico Ballester.
    
    Esta funci√≥n debe REEMPLAZAR o LLAMARSE ANTES de process_message_logic()
    en main.py para habilitar el flujo m√©dico espec√≠fico.
    """
    
    # Obtener contexto actual
    conversation_data = memory.get_conversation_data(author)
    history = conversation_data.get('history', [])
    state_context = conversation_data.get('state_context', {})
    
    # Reconstruir mensaje del usuario
    mensaje_completo_usuario = _reconstruir_mensaje_usuario(messages)
    
    # === INTEGRACI√ìN BALLESTER V11 ===
    if BALLESTER_V11_ENABLED:
        
        # PASO 1: Verificar si debe usar flujo m√©dico Ballester
        ballester_extensions = ballester_main_extensions.BallesterMainExtensions()
        
        if ballester_extensions.should_use_ballester_flow(mensaje_completo_usuario, state_context):
            logger.info("[BALLESTER] üè• Usando flujo m√©dico espec√≠fico")
            
            try:
                # Procesar con flujo m√©dico de Ballester
                resultado_ballester = ballester_extensions.process_ballester_message(
                    mensaje_completo_usuario, state_context, author, history
                )
                
                if resultado_ballester:
                    mensaje_respuesta, contexto_actualizado, botones = resultado_ballester
                    
                    # Enviar respuesta
                    if botones:
                        msgio_handler.send_interactive_message(author, mensaje_respuesta, botones)
                    else:
                        msgio_handler.send_message(author, mensaje_respuesta)
                    
                    # Actualizar memoria
                    memory.update_conversation_state(author, 
                        contexto_actualizado.get('current_state', 'conversando'), 
                        contexto_actualizado
                    )
                    
                    # Registrar en Chatwoot
                    _registrar_en_chatwoot(author, mensaje_completo_usuario, mensaje_respuesta)
                    
                    return  # Terminar aqu√≠, no continuar con flujo est√°ndar
                
            except Exception as e:
                logger.error(f"[BALLESTER] ‚ùå Error en flujo m√©dico: {e}")
                # Continuar con flujo est√°ndar en caso de error
        
        # PASO 2: Mejorar Meta-Agente con detecci√≥n m√©dica
        meta_enhancement = ballester_extensions.enhance_meta_agent_for_ballester(
            mensaje_completo_usuario, state_context, history
        )
        
        if meta_enhancement:
            logger.info(f"[BALLESTER] üß† Meta-Agente mejorado: {meta_enhancement.get('decision')}")
            
            # Si se detect√≥ intenci√≥n m√©dica espec√≠fica, usar resultado mejorado
            if meta_enhancement.get('ballester_specific'):
                # Procesar con resultado mejorado
                accion_recomendada = meta_enhancement.get('accion_recomendada')
                
                if accion_recomendada in MAPA_DE_ACCIONES:
                    # Ejecutar acci√≥n m√©dica espec√≠fica
                    respuesta, contexto_actualizado = _ejecutar_accion(
                        accion_recomendada, history, 
                        meta_enhancement.get('datos_extraidos', {}),
                        state_context, mensaje_completo_usuario, author
                    )
                    
                    # Enviar y registrar respuesta
                    msgio_handler.send_message(author, respuesta)
                    memory.update_conversation_state(author, 
                        contexto_actualizado.get('current_state', 'conversando'),
                        contexto_actualizado
                    )
                    _registrar_en_chatwoot(author, mensaje_completo_usuario, respuesta)
                    
                    return  # Terminar aqu√≠
    
    # === CONTINUAR CON FLUJO EST√ÅNDAR ===
    # Si llegamos aqu√≠, continuar con process_message_logic() original
    return process_message_logic_original(messages, author)
'''

# =================== CONFIGURACI√ìN DE VARIABLES DE ENTORNO ===================

BALLESTER_ENV_VARIABLES = '''
# === VARIABLES ESPEC√çFICAS BALLESTER V11 ===

# Configuraci√≥n b√°sica
TENANT_NAME="CENTRO_PEDIATRICO_BALLESTER"
BALLESTER_V11_ENABLED="true"

# API de la cl√≠nica
CLINICA_API_BASE="https://api.clinicaballester.com/v1"
CLINICA_API_KEY="[proporcionado_por_la_clinica]"

# Prompt espec√≠fico Agente Cero Ballester
PROMPT_AGENTE_CERO="[USAR PROMPT_AGENTE_CERO_BALLESTER del archivo ballester_main_extensions.py]"

# Notificaciones espec√≠ficas
NOTIFICATION_CONTACT="549XXXXXXXXX"  # Tel√©fono del staff m√©dico
ESCALATION_TIMEOUT="900"  # 15 minutos para escalaci√≥n

# WhatsApp Business (360dialog) - mantener configuraci√≥n existente
D360_API_KEY="[existente]"
D360_WHATSAPP_PHONE_ID="[existente]"

# OpenAI GPT-5 - mantener configuraci√≥n existente  
OPENAI_API_KEY="[existente]"
OPENAI_ORG_ID="[existente]"
OPENAI_MODEL="gpt-5"

# Firebase - mantener configuraci√≥n existente
GOOGLE_APPLICATION_CREDENTIALS="[existente]"

# Configuraci√≥n espec√≠fica m√©dica
REQUIRE_DNI_VALIDATION="true"
REQUIRE_INSURANCE_VERIFICATION="true"
MAX_APPOINTMENT_SEARCH_DAYS="30"
'''

# =================== INSTRUCCIONES DE IMPLEMENTACI√ìN PASO A PASO ===================

IMPLEMENTATION_STEPS = '''
üìã **INSTRUCCIONES DE IMPLEMENTACI√ìN PASO A PASO**

üîß **PASO 1: PREPARACI√ìN**
1. Hacer backup completo del sistema actual
2. Verificar que todos los archivos V11 est√©n en el directorio ra√≠z:
   - verification_handler.py
   - rules_engine.py  
   - clinica_api.py
   - ballester_agendamiento_adapter.py
   - ballester_notifications.py
   - ballester_main_extensions.py
   - ballester_firebase_config.py

üîß **PASO 2: CONFIGURAR VARIABLES DE ENTORNO**
1. Agregar las variables espec√≠ficas de Ballester al sistema
2. Configurar NOTIFICATION_CONTACT con el tel√©fono del staff m√©dico
3. Obtener y configurar CLINICA_API_KEY de la cl√≠nica
4. Actualizar PROMPT_AGENTE_CERO con el prompt espec√≠fico de Ballester

üîß **PASO 3: MODIFICAR MAIN.PY (SIN SOBREESCRIBIR)**
1. Agregar las importaciones de Ballester despu√©s de las importaciones existentes
2. Agregar las acciones de Ballester al MAPA_DE_ACCIONES existente
3. Modificar process_message_logic() para incluir verificaci√≥n de flujo m√©dico
4. Agregar manejo de botones interactivos espec√≠ficos de Ballester

üîß **PASO 4: CONFIGURAR FIREBASE**
1. Ejecutar ballester_firebase_config.setup_ballester_database()
2. Verificar configuraci√≥n con ballester_firebase_config.verify_ballester_database()
3. Revisar que todas las colecciones se crearon correctamente

üîß **PASO 5: CONFIGURAR API CL√çNICA**
1. Obtener credenciales de API del sistema OMNIA
2. Verificar endpoints disponibles
3. Probar conectividad con clinica_api.BallesterClinicaAPI()

üîß **PASO 6: TESTING**
1. Probar flujo completo de neurolog√≠a con IOMA (lista de espera)
2. Probar flujo de ecograf√≠a con PASTELEROS (bono consulta)
3. Probar escalaci√≥n /clientedemorado
4. Verificar notificaciones al staff

üîß **PASO 7: GO-LIVE**
1. Configurar n√∫mero de WhatsApp Business espec√≠fico para Ballester
2. Configurar webhook de 360dialog
3. Activar BALLESTER_V11_ENABLED=true
4. Monitorear primeras conversaciones
'''

# =================== C√ìDIGO EXACTO PARA AGREGAR A MAIN.PY ===================

MAIN_PY_ADDITIONS = '''
# ===============================================
# === INTEGRACIONES BALLESTER V11 - INICIO ===
# ===============================================

# AGREGAR DESPU√âS DE LAS IMPORTACIONES EXISTENTES:
try:
    import verification_handler
    import rules_engine 
    import ballester_notifications
    import ballester_agendamiento_adapter
    import ballester_main_extensions
    import clinica_api
    
    BALLESTER_V11_ENABLED = True
    logger.info("[MAIN] ‚úÖ Sistema Ballester V11 cargado")
    
    # Inicializar extensiones de Ballester
    ballester_extensions = ballester_main_extensions.BallesterMainExtensions()
    
except ImportError as e:
    BALLESTER_V11_ENABLED = False
    logger.warning(f"[MAIN] ‚ö†Ô∏è Sistema Ballester V11 no disponible: {e}")

# AGREGAR AL MAPA_DE_ACCIONES EXISTENTE (despu√©s de la definici√≥n actual):
if BALLESTER_V11_ENABLED:
    MAPA_DE_ACCIONES.update({
        'iniciar_verificacion_medica': ballester_main_extensions.start_ballester_medical_verification,
        'consultar_cobertura_ballester': ballester_main_extensions.start_ballester_coverage_check,
    })

# MODIFICAR LA FUNCI√ìN process_message_logic EXISTENTE:
# AGREGAR ESTAS L√çNEAS AL INICIO DE process_message_logic(), ANTES DEL PROCESAMIENTO ACTUAL:

def process_message_logic(messages, author):
    """Funci√≥n principal de procesamiento con integraci√≥n Ballester V11"""
    
    # === INTEGRACI√ìN BALLESTER V11 - VERIFICACI√ìN PREVIA ===
    if BALLESTER_V11_ENABLED:
        try:
            # Reconstruir mensaje del usuario
            mensaje_completo_usuario = _reconstruir_mensaje_usuario(messages)
            
            # Obtener contexto actual
            conversation_data = memory.get_conversation_data(author)
            history = conversation_data.get('history', [])
            state_context = conversation_data.get('state_context', {})
            
            # Verificar si debe usar flujo m√©dico Ballester
            if ballester_extensions.should_use_ballester_flow(mensaje_completo_usuario, state_context):
                logger.info("[MAIN] üè• Procesando con flujo m√©dico Ballester")
                
                # Procesar con sistema m√©dico espec√≠fico
                resultado_ballester = ballester_extensions.process_ballester_message(
                    mensaje_completo_usuario, state_context, author, history
                )
                
                if resultado_ballester:
                    mensaje_respuesta, contexto_actualizado, botones = resultado_ballester
                    
                    # Enviar respuesta
                    if botones:
                        msgio_handler.send_interactive_message(author, mensaje_respuesta, botones)
                    else:
                        msgio_handler.send_message(author, mensaje_respuesta)
                    
                    # Actualizar memoria
                    memory.update_conversation_state(
                        author, 
                        contexto_actualizado.get('current_state', 'conversando'),
                        contexto_actualizado
                    )
                    
                    # Registrar en Chatwoot
                    _registrar_en_chatwoot(author, mensaje_completo_usuario, mensaje_respuesta)
                    
                    return  # TERMINAR AQU√ç - No continuar con flujo est√°ndar
            
        except Exception as e:
            logger.error(f"[MAIN] ‚ùå Error en flujo Ballester V11: {e}")
            # Continuar con flujo est√°ndar en caso de error
    
    # === CONTINUAR CON L√ìGICA ORIGINAL ===
    # [AQU√ç VA TODO EL C√ìDIGO ORIGINAL DE process_message_logic()]
    # ... resto del c√≥digo existente sin modificar ...

# MODIFICAR LA FUNCI√ìN _obtener_estrategia EXISTENTE:
# AGREGAR ESTAS L√çNEAS AL INICIO DE _obtener_estrategia():

def _obtener_estrategia(mensaje_completo_usuario, history, current_state=None, state_context=None):
    """Funci√≥n de estrategia mejorada con integraci√≥n Ballester V11"""
    
    # === MEJORA BALLESTER V11 DEL META-AGENTE ===
    if BALLESTER_V11_ENABLED:
        try:
            # Mejorar Meta-Agente con detecci√≥n m√©dica espec√≠fica
            ballester_enhancement = ballester_extensions.enhance_meta_agent_for_ballester(
                mensaje_completo_usuario, state_context or {}, history
            )
            
            if ballester_enhancement and ballester_enhancement.get('ballester_specific'):
                logger.info(f"[MAIN] üß† Meta-Agente mejorado para Ballester: {ballester_enhancement.get('decision')}")
                return ballester_enhancement
                
        except Exception as e:
            logger.error(f"[MAIN] Error en mejora Meta-Agente Ballester: {e}")
    
    # === CONTINUAR CON L√ìGICA ORIGINAL ===
    # [AQU√ç VA TODO EL C√ìDIGO ORIGINAL DE _obtener_estrategia()]
    # ... resto del c√≥digo existente sin modificar ...

# AGREGAR FUNCI√ìN HELPER PARA MANEJO DE BOTONES BALLESTER:
def _manejar_interactivos_ballester(id_interactivo, state_context, author):
    """Maneja botones interactivos espec√≠ficos de Ballester"""
    
    if not BALLESTER_V11_ENABLED:
        return None
    
    # Botones de verificaci√≥n m√©dica
    if any(pattern in id_interactivo for pattern in [
        'paciente_si', 'paciente_no', 'datos_correctos', 'datos_editar',
        'turno_ballester_', 'ver_turnos_ballester', 'confirmar_turno_ballester',
        'agregar_lista_espera_ballester', 'si_contacto_humano_ballester'
    ]):
        try:
            return ballester_extensions.process_ballester_message(
                id_interactivo, state_context, author, []
            )
        except Exception as e:
            logger.error(f"[MAIN] Error manejando bot√≥n Ballester {id_interactivo}: {e}")
            return None
    
    return None

# AGREGAR ESTA VERIFICACI√ìN EN LA FUNCI√ìN DE VALIDACI√ìN DE IDs INTERACTIVOS:
# AGREGAR AL INICIO DE _validar_id_interactivo():

def _validar_id_interactivo(id_interactivo, current_state):
    """Funci√≥n mejorada con soporte para botones Ballester"""
    
    # === VERIFICACI√ìN BALLESTER V11 PRIMERO ===
    if BALLESTER_V11_ENABLED and any(pattern in id_interactivo for pattern in [
        'ballester', 'paciente_', 'datos_', 'turno_ballester_', 'lista_espera_ballester'
    ]):
        logger.info(f"[MAIN] üè• Bot√≥n Ballester detectado: {id_interactivo}")
        
        # Determinar acci√≥n espec√≠fica de Ballester
        if 'turno_ballester_' in id_interactivo:
            return 'confirmar_turno_ballester'
        elif 'agregar_lista_espera_ballester' in id_interactivo:
            return 'agregar_lista_espera'
        elif 'confirmar_turno_ballester' in id_interactivo:
            return 'finalizar_cita_ballester'
        elif any(btn in id_interactivo for btn in ['paciente_si', 'paciente_no']):
            return 'continuar_verificacion_medica'
        elif any(btn in id_interactivo for btn in ['datos_correctos', 'datos_editar']):
            return 'procesar_datos_paciente'
    
    # === CONTINUAR CON L√ìGICA ORIGINAL ===
    # [AQU√ç VA TODO EL C√ìDIGO ORIGINAL DE _validar_id_interactivo()]
    # ... resto del c√≥digo existente sin modificar ...
'''

# =================== CONFIGURACI√ìN INICIAL DE BASE DE DATOS ===================

FIREBASE_INITIALIZATION_SCRIPT = '''
# SCRIPT DE INICIALIZACI√ìN DE BASE DE DATOS BALLESTER
# Ejecutar UNA SOLA VEZ despu√©s de deplogar todos los archivos

import ballester_firebase_config

def initialize_ballester_system():
    """
    Funci√≥n para inicializar completamente el sistema Ballester V11.
    EJECUTAR UNA SOLA VEZ.
    """
    print("üè• Inicializando Sistema Ballester V11...")
    
    # Paso 1: Configurar base de datos
    print("üìä Configurando base de datos Firebase...")
    success = ballester_firebase_config.setup_ballester_database()
    
    if success:
        print("‚úÖ Base de datos configurada exitosamente")
        
        # Paso 2: Verificar configuraci√≥n
        print("üîç Verificando configuraci√≥n...")
        verification = ballester_firebase_config.verify_ballester_database()
        
        if verification.get('all_configured'):
            print("‚úÖ Verificaci√≥n exitosa - Sistema listo")
            print("üè• Centro Pedi√°trico Ballester V11 configurado completamente")
            return True
        else:
            print("‚ùå Error en verificaci√≥n:")
            for key, value in verification.items():
                if not value:
                    print(f"   ‚ùå {key}: No configurado")
            return False
    else:
        print("‚ùå Error configurando base de datos")
        return False

# Para ejecutar la inicializaci√≥n:
if __name__ == "__main__":
    initialize_ballester_system()
'''

# =================== TESTING Y VALIDACI√ìN ===================

TESTING_SCENARIOS = '''
üß™ **ESCENARIOS DE TESTING ESPEC√çFICOS BALLESTER**

**Test 1: Flujo Neurolog√≠a con IOMA (Lista de Espera)**
Usuario: "QUIERO AGENDAR neurolog√≠a"
‚Üí verification_handler identifica: Neurolog√≠a Infantil
‚Üí Pregunta: "¬øYa eres paciente?"
Usuario: "S√≠" 
‚Üí Pide DNI
Usuario: "12345678"
‚Üí clinica_api busca en OMNIA
‚Üí rules_engine determina: WAITLIST (IOMA)
‚Üí Respuesta: Lista de espera + bono contribuci√≥n $2500
‚Üí ballester_notifications.add_to_waitlist()
‚úÖ **Esperado:** Cliente en lista, staff notificado

**Test 2: Ecograf√≠a con PASTELEROS (Bono Requerido)**  
Usuario: "necesito ecograf√≠a abdominal"
‚Üí Flujo completo de verificaci√≥n
‚Üí rules_engine detecta: PASTELEROS + ecograf√≠a
‚Üí Respuesta: Autorizaci√≥n + Bono Consulta + preparaci√≥n espec√≠fica por edad
‚úÖ **Esperado:** Requisitos claros, instrucciones de preparaci√≥n

**Test 3: EEG con MEDICARDIO (Cubierto)**
Usuario: "QUIERO AGENDAR electroencefalograma"
‚Üí Verificaci√≥n completa
‚Üí rules_engine: MEDICARDIO cubre EEG
‚Üí Respuesta: Cubierto + copago $4000 + preparaciones espec√≠ficas
‚úÖ **Esperado:** Cita disponible, prep instructions

**Test 4: Cliente Frustrado (Escalaci√≥n)**
Usuario: "no entiendo nada, ayuda"
‚Üí ballester_notifications.detect_client_frustration() detecta frustraci√≥n
‚Üí Activa trigger_client_delayed_flow()
‚Üí Ofrece escalaci√≥n con botones
Usuario: "S√≠, que me contacten"
‚Üí ballester_notifications.send_escalation_notification()
‚úÖ **Esperado:** Staff notificado con contexto completo

**Test 5: Dr. Malacchia Lunes (Arancel Especial)**
Usuario: "QUIERO AGENDAR Dr Malacchia lunes"
‚Üí rules_engine detecta caso especial
‚Üí Obra social no autorizada ‚Üí arancel especial $22500
‚Üí Confirmaci√≥n expl√≠cita requerida
‚úÖ **Esperado:** Arancel claro, confirmaci√≥n expl√≠cita

**Test 6: PRUNAPE Fuera de Edad**
Usuario: "QUIERO AGENDAR PRUNAPE"
‚Üí Recopila datos paciente
‚Üí Edad: 7 a√±os
‚Üí rules_engine valida edad ‚Üí Fuera de rango
‚Üí Respuesta: No elegible + derivaci√≥n a humano
‚úÖ **Esperado:** Validaci√≥n de edad, derivaci√≥n apropiada
'''

print(f"""
üè• **GU√çA DE INTEGRACI√ìN BALLESTER V11 COMPLETA**

‚úÖ **ARCHIVOS CREADOS:**
- verification_handler.py (Orquestador m√©dico)
- rules_engine.py (Motor de reglas determinista)
- clinica_api.py (Wrapper API OMNIA)
- ballester_agendamiento_adapter.py (Adaptador agendamiento)
- ballester_notifications.py (Sistema notificaciones)
- ballester_main_extensions.py (Extensiones main.py)
- ballester_firebase_config.py (Configuraci√≥n base de datos)

üìã **PR√ìXIMOS PASOS:**
1. Configurar variables de entorno espec√≠ficas
2. Integrar c√≥digo con main.py existente
3. Inicializar base de datos Firebase
4. Configurar API cl√≠nica OMNIA
5. Testing completo de flujos m√©dicos
6. Go-live con Centro Pedi√°trico Ballester

üéØ **RESULTADO FINAL:**
Sistema OptiAtiende-IA V11 especializado para Centro Pedi√°trico Ballester
con flujo m√©dico completo, verificaci√≥n de obras sociales, motor de reglas
determinista, y escalaci√≥n inteligente.

üèÜ **ESTADO:** Implementaci√≥n completa lista para integraci√≥n

¬øProcedemos con la integraci√≥n al main.py?
""")
